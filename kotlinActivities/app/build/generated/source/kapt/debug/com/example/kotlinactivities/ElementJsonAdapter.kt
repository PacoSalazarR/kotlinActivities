// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN")

package com.example.kotlinactivities

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.`internal`.Util
import java.lang.NullPointerException
import java.lang.reflect.Constructor
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.emptySet
import kotlin.jvm.Volatile
import kotlin.text.buildString

public class ElementJsonAdapter(
  moshi: Moshi
) : JsonAdapter<Element>() {
  private val options: JsonReader.Options = JsonReader.Options.of("name", "image", "texto", "sound")

  private val stringAdapter: JsonAdapter<String> = moshi.adapter(String::class.java, emptySet(),
      "name")

  private val nullableAssignedImageAdapter: JsonAdapter<AssignedImage?> =
      moshi.adapter(AssignedImage::class.java, emptySet(), "image")

  private val nullableAssignedTextAdapter: JsonAdapter<AssignedText?> =
      moshi.adapter(AssignedText::class.java, emptySet(), "texto")

  private val intAdapter: JsonAdapter<Int> = moshi.adapter(Int::class.java, emptySet(), "sound")

  @Volatile
  private var constructorRef: Constructor<Element>? = null

  public override fun toString(): String = buildString(29) {
      append("GeneratedJsonAdapter(").append("Element").append(')') }

  public override fun fromJson(reader: JsonReader): Element {
    var name: String? = null
    var image: AssignedImage? = null
    var texto: AssignedText? = null
    var sound: Int? = 0
    var mask0 = -1
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> {
          name = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("name", "name", reader)
          // $mask = $mask and (1 shl 0).inv()
          mask0 = mask0 and 0xfffffffe.toInt()
        }
        1 -> {
          image = nullableAssignedImageAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 1).inv()
          mask0 = mask0 and 0xfffffffd.toInt()
        }
        2 -> {
          texto = nullableAssignedTextAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 2).inv()
          mask0 = mask0 and 0xfffffffb.toInt()
        }
        3 -> {
          sound = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("sound", "sound", reader)
          // $mask = $mask and (1 shl 3).inv()
          mask0 = mask0 and 0xfffffff7.toInt()
        }
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    if (mask0 == 0xfffffff0.toInt()) {
      // All parameters with defaults are set, invoke the constructor directly
      return  Element(
          name = name as String,
          image = image,
          texto = texto,
          sound = sound as Int
      )
    } else {
      // Reflectively invoke the synthetic defaults constructor
      @Suppress("UNCHECKED_CAST")
      val localConstructor: Constructor<Element> = this.constructorRef ?:
          Element::class.java.getDeclaredConstructor(String::class.java, AssignedImage::class.java,
          AssignedText::class.java, Int::class.javaPrimitiveType, Int::class.javaPrimitiveType,
          Util.DEFAULT_CONSTRUCTOR_MARKER).also { this.constructorRef = it }
      return localConstructor.newInstance(
          name,
          image,
          texto,
          sound,
          mask0,
          /* DefaultConstructorMarker */ null
      )
    }
  }

  public override fun toJson(writer: JsonWriter, value_: Element?): Unit {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("name")
    stringAdapter.toJson(writer, value_.name)
    writer.name("image")
    nullableAssignedImageAdapter.toJson(writer, value_.image)
    writer.name("texto")
    nullableAssignedTextAdapter.toJson(writer, value_.texto)
    writer.name("sound")
    intAdapter.toJson(writer, value_.sound)
    writer.endObject()
  }
}
